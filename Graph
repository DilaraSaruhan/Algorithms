#include <stdio.h>
#include <stdlib.h>

/*    Adjacency Matrix:                                          

           1   2   3   4   5   6   7                  Adjacency List:

       1   0   1   1   1   0   0   0                  1 -> 4 -> 3 -> 2
    
       2   0   0   0   1   1   0   0                  2 -> 5 -> 4
   
       3   0   0   0   0   0   1   0                  3 -> 6 
   
       4   0   0   1   0   0   1   1                  4 -> 7 -> 6 -> 3 
   
       5   0   0   0   1   0   0   1                  5 -> 7 -> 4 
   
       6   0   0   0   0   0   0   0                  6 
   
       7   0   0   0   0   0   1   0                  7 -> 6 
       
       
       G = (D, K) graph  (D:Düğüm, K:Kenar)
       D = {1, 2, 3, 4, 5, 6, 7}
       K = {(1, 2), (1, 3), (1, 4), (2, 4), (2, 5), (3, 6), (4, 3), (4, 6), (4, 7), (5, 4), (5, 7), (7, 6)}

*/struct AdjListNode
{ 
    int dest; 
    struct AdjListNode* next; 
}; 
   
struct AdjList 
{ 
    struct AdjListNode *head;  
}; 
  
struct Graph 
{ 
    int V; 
    struct AdjList* array; 
}; 
  
struct AdjListNode* newAdjListNode(int dest) 
{ 
    struct AdjListNode* newNode = 
     (struct AdjListNode*) malloc(sizeof(struct AdjListNode)); 
    newNode->dest = dest; 
    newNode->next = NULL; 
    return newNode; 
} 
  
struct Graph* createGraph(int V) 
{ 
    struct Graph* graph =  
        (struct Graph*) malloc(sizeof(struct Graph)); 
    graph->V = V; 
  

    graph->array =  
      (struct AdjList*) malloc(V * sizeof(struct AdjList)); 
  
  
    int i; 
    for (i = 1; i < V; ++i) 
        graph->array[i].head = NULL; 
  
    return graph; 
} 

void addEdge(struct Graph* graph, int src, int dest) 
{ 
  
    struct AdjListNode* newNode = newAdjListNode(dest); 
    newNode->next = graph->array[src].head; 
    graph->array[src].head = newNode; 
  
    newNode = newAdjListNode(src); 
    newNode->next = graph->array[dest].head; 
    graph->array[dest].head = newNode; 
} 
   
void printGraph(struct Graph* graph) 
{ 
    int v; 
    for (v = 1; v <= graph->V; ++v) 
    { 
        struct AdjListNode* pCrawl = graph->array[v].head; 
        printf("\n Adjacency list of vertex %d\n head ", v); 
        while (pCrawl) 
        { 
            printf("-> %d", pCrawl->dest); 
            pCrawl = pCrawl->next; 
        } 
        printf("\n"); 
    } 
} 
  
int main() 
{ 
    int V = 7; 
    struct Graph* graph = createGraph(V); 
    addEdge(graph, 1, 2); 
    addEdge(graph, 1, 3); 
    addEdge(graph, 1, 4); 
    
    addEdge(graph, 2, 4); 
    addEdge(graph, 2, 5);
	 
    addEdge(graph, 3, 6); 
    
    addEdge(graph, 4, 3); 
    addEdge(graph, 4, 6); 
    addEdge(graph, 4, 7);
	 
    addEdge(graph, 5, 4); 
    addEdge(graph, 5, 7);
    
    addEdge(graph, 7, 6);
    
  
    printGraph(graph); 
  
    return 0; 
} 

